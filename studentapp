import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Objective: Student Management Application built using JDBC and the 
 * Model-View-Controller (MVC) architectural pattern.
 * * Components:
 * 1. Model (Student class): Data structure.
 * 2. Controller (StudentController class): JDBC/Database logic.
 * 3. View (main method): User interface and menu handling.
 * * NOTE: This program requires the MySQL Connector/J driver in the classpath.
 */
public class JdbcMySQLExample {

    // --- JDBC Connection Details (Update these placeholders) ---
    private static final String JDBC_DRIVER = "com.mysql.cj.jdbc.Driver";
    private static final String DB_URL = "jdbc:mysql://localhost:3306/your_database_name";
    private static final String USER = "your_username";
    private static final String PASS = "your_password";
    
    private static final Scanner scanner = new Scanner(System.in);
    
    // ===================================================================
    // 1. MODEL (Student Data Structure)
    // ===================================================================

    static class Student {
        private int studentId;
        private String name;
        private String department;
        private double marks;

        // Constructor for creating new students (ID auto-generated in DB)
        public Student(String name, String department, double marks) {
            this.name = name;
            this.department = department;
            this.marks = marks;
        }

        // Constructor for loading students from the database
        public Student(int studentId, String name, String department, double marks) {
            this.studentId = studentId;
            this.name = name;
            this.department = department;
            this.marks = marks;
        }

        public int getStudentId() { return studentId; }
        public String getName() { return name; }
        public String getDepartment() { return department; }
        public double getMarks() { return marks; }

        public void setName(String name) { this.name = name; }
        public void setDepartment(String department) { this.department = department; }
        public void setMarks(double marks) { this.marks = marks; }

        @Override
        public String toString() {
            return String.format("%-10d | %-25s | %-15s | %-10.2f", 
                studentId, name, department, marks);
        }
    }

    // ===================================================================
    // 2. CONTROLLER (Database Operations)
    // ===================================================================
    
    static class StudentController {
        private final Connection conn;

        // SQL Statements
        private static final String CREATE_TABLE_SQL = 
            "CREATE TABLE IF NOT EXISTS Student (" +
            "StudentID INT PRIMARY KEY AUTO_INCREMENT," +
            "Name VARCHAR(100) NOT NULL," +
            "Department VARCHAR(50) NOT NULL," +
            "Marks DOUBLE NOT NULL)";
        
        private static final String INSERT_SQL = 
            "INSERT INTO Student (Name, Department, Marks) VALUES (?, ?, ?)";
        private static final String SELECT_ALL_SQL = 
            "SELECT StudentID, Name, Department, Marks FROM Student ORDER BY StudentID";
        private static final String UPDATE_SQL = 
            "UPDATE Student SET Name = ?, Department = ?, Marks = ? WHERE StudentID = ?";
        private static final String DELETE_SQL = 
            "DELETE FROM Student WHERE StudentID = ?";

        public StudentController(Connection conn) throws SQLException {
            this.conn = conn;
            // Setup table when controller is initialized
            try (PreparedStatement createStmt = conn.prepareStatement(CREATE_TABLE_SQL)) {
                createStmt.execute();
            }
        }

        // --- CRUD: CREATE ---
        public boolean addStudent(Student student) throws SQLException {
            conn.setAutoCommit(false);
            try (PreparedStatement pstmt = conn.prepareStatement(INSERT_SQL)) {
                
                pstmt.setString(1, student.getName());
                pstmt.setString(2, student.getDepartment());
                pstmt.setDouble(3, student.getMarks());
                
                int rowsAffected = pstmt.executeUpdate();
                
                if (rowsAffected > 0) {
                    conn.commit();
                    return true;
                } else {
                    conn.rollback();
                    return false;
                }
            } catch (SQLException e) {
                conn.rollback();
                throw e;
            } finally {
                conn.setAutoCommit(true);
            }
        }

        // --- CRUD: READ ALL ---
        public List<Student> getAllStudents() throws SQLException {
            List<Student> studentList = new ArrayList<>();
            try (PreparedStatement pstmt = conn.prepareStatement(SELECT_ALL_SQL);
                 ResultSet rs = pstmt.executeQuery()) {
                
                while (rs.next()) {
                    int id = rs.getInt("StudentID");
                    String name = rs.getString("Name");
                    String dept = rs.getString("Department");
                    double marks = rs.getDouble("Marks");
                    
                    studentList.add(new Student(id, name, dept, marks));
                }
            }
            return studentList;
        }

        // --- CRUD: UPDATE ---
        public boolean updateStudent(int id, Student updatedDetails) throws SQLException {
            conn.setAutoCommit(false);
            try (PreparedStatement pstmt = conn.prepareStatement(UPDATE_SQL)) {
                
                pstmt.setString(1, updatedDetails.getName());
                pstmt.setString(2, updatedDetails.getDepartment());
                pstmt.setDouble(3, updatedDetails.getMarks());
                pstmt.setInt(4, id);
                
                int rowsAffected = pstmt.executeUpdate();
                
                if (rowsAffected > 0) {
                    conn.commit();
                    return true;
                } else {
                    conn.rollback();
                    return false;
                }
            } catch (SQLException e) {
                conn.rollback();
                throw e;
            } finally {
                conn.setAutoCommit(true);
            }
        }

        // --- CRUD: DELETE ---
        public boolean deleteStudent(int id) throws SQLException {
            conn.setAutoCommit(false);
            try (PreparedStatement pstmt = conn.prepareStatement(DELETE_SQL)) {
                
                pstmt.setInt(1, id);
                
                int rowsAffected = pstmt.executeUpdate();
                
                if (rowsAffected > 0) {
                    conn.commit();
                    return true;
                } else {
                    conn.rollback();
                    return false;
                }
            } catch (SQLException e) {
                conn.rollback();
                throw e;
            } finally {
                conn.setAutoCommit(true);
            }
        }
    }


    // ===================================================================
    // 3. VIEW (User Interface and Main Application Logic)
    // ===================================================================

    public static void main(String[] args) {
        
        // 1. Load the JDBC Driver
        try {
            Class.forName(JDBC_DRIVER);
        } catch (ClassNotFoundException e) {
            System.err.println("ERROR: MySQL JDBC Driver not found. Ensure the connector JAR is in your classpath.");
            e.printStackTrace();
            return;
        }

        System.out.println("Attempting to connect to database...");

        // 2. Establish Connection and Initialize Controller
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS)) {
            
            StudentController controller = new StudentController(conn);
            System.out.println("Connection successful. Database setup complete: 'Student' table is ready.");
            
            // 3. Main Menu Loop
            boolean running = true;
            while (running) {
                displayMenu();
                
                try {
                    int choice = Integer.parseInt(scanner.nextLine());

                    switch (choice) {
                        case 1:
                            viewAddStudent(controller);
                            break;
                        case 2:
                            viewAllStudents(controller);
                            break;
                        case 3:
                            viewUpdateStudent(controller);
                            break;
                        case 4:
                            viewDeleteStudent(controller);
                            break;
                        case 5:
                            running = false;
                            System.out.println("Exiting Student Manager. Goodbye!");
                            break;
                        default:
                            System.out.println("Invalid choice. Please enter a number between 1 and 5.");
                    }
                } catch (NumberFormatException e) {
                    System.out.println("Invalid input. Please enter a numerical choice.");
                } catch (SQLException e) {
                     System.err.println("\nA database operation failed:");
                     System.err.println("Error: " + e.getMessage());
                }
            }

        } catch (SQLException e) {
            System.err.println("\nFATAL DATABASE ERROR OCCURRED:");
            System.err.println("Please check your DB_URL, USER, and PASS credentials.");
            e.printStackTrace();
        } finally {
            scanner.close();
        }
    }
    
    private static void displayMenu() {
        System.out.println("\n====================================");
        System.out.println("  STUDENT MANAGEMENT SYSTEM (MVC)");
        System.out.println("====================================");
        System.out.println("1. Add New Student");
        System.out.println("2. View All Students");
        System.out.println("3. Update Student Details");
        System.out.println("4. Delete Student Record");
        System.out.println("5. Exit Application");
        System.out.println("====================================");
        System.out.print("Enter your choice (1-5): ");
    }
    
    private static void viewAddStudent(StudentController controller) throws SQLException {
        System.out.println("\n--- ADD NEW STUDENT ---");
        System.out.print("Enter Name: ");
        String name = scanner.nextLine();
        
        System.out.print("Enter Department: ");
        String dept = scanner.nextLine();
        
        System.out.print("Enter Marks: ");
        double marks = Double.parseDouble(scanner.nextLine());
        
        Student newStudent = new Student(name, dept, marks);
        
        if (controller.addStudent(newStudent)) {
            System.out.println("SUCCESS: Student '" + name + "' added.");
        } else {
            System.out.println("FAILURE: Student addition failed.");
        }
    }
    
    private static void viewAllStudents(StudentController controller) throws SQLException {
        List<Student> students = controller.getAllStudents();
        System.out.println("\n--- ALL STUDENTS ---");
        System.out.println("------------------------------------------------------------------");
        System.out.printf("%-10s | %-25s | %-15s | %-10s\n", "ID", "Name", "Department", "Marks");
        System.out.println("------------------------------------------------------------------");
        
        if (students.isEmpty()) {
            System.out.println("No student records found.");
        } else {
            students.forEach(System.out::println);
        }
        System.out.println("------------------------------------------------------------------");
    }
    
    private static void viewUpdateStudent(StudentController controller) throws SQLException {
        System.out.println("\n--- UPDATE STUDENT ---");
        System.out.print("Enter Student ID to update: ");
        int id = Integer.parseInt(scanner.nextLine());
        
        System.out.print("Enter New Name: ");
        String name = scanner.nextLine();
        
        System.out.print("Enter New Department: ");
        String dept = scanner.nextLine();
        
        System.out.print("Enter New Marks: ");
        double marks = Double.parseDouble(scanner.nextLine());
        
        // Create a temporary Student object to hold the updated data
        Student updatedStudent = new Student(id, name, dept, marks); 
        
        if (controller.updateStudent(id, updatedStudent)) {
            System.out.println("SUCCESS: Student ID " + id + " updated.");
        } else {
            System.out.println("FAILURE: Student ID " + id + " not found or update failed.");
        }
    }
    
    private static void viewDeleteStudent(StudentController controller) throws SQLException {
        System.out.println("\n--- DELETE STUDENT ---");
        System.out.print("Enter Student ID to delete: ");
        int id = Integer.parseInt(scanner.nextLine());
        
        if (controller.deleteStudent(id)) {
            System.out.println("SUCCESS: Student ID " + id + " deleted.");
        } else {
            System.out.println("FAILURE: Student ID " + id + " not found or deletion failed.");
        }
    }
}
